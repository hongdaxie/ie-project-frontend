{"version":3,"sources":["views/Register/index.js","actions/register.js"],"names":["Register","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","console","log","register","handleConfirmBlur","value","target","setState","confirmDirty","state","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","validatePreferName","test","validateNameLength","length","validatePassword","getFieldDecorator","this","isLogin","to","lg","span","offset","md","style","marginTop","marginBottom","maxWidth","margin","labelCol","xs","sm","wrapperCol","onSubmit","Item","label","rules","type","message","required","disabled","isLoading","hasFeedback","validator","Password","onBlur","title","whitespace","htmlType","loading","Component","connect","user","userInfo","dispatch","actionTypes","START_REGISTER","requestBody","JSON","stringify","registerRequest","then","resp","data","window","sessionStorage","setItem","success","nickname","REGISTER_SUCCESS","payload","registerSuccess","error","REGISTER_FAILED","create","name"],"mappings":"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","file":"static/js/21.df4c7385.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Form, Input, Tooltip, Icon, Col, Button, Card, } from 'antd'\nimport {connect} from 'react-redux'\nimport { register } from '../../actions/register'\nimport { Redirect } from 'react-router-dom'\n\n// const { MonthPicker } = DatePicker\nclass Register extends Component {\n\n    constructor(){\n        super()\n        this.state = {\n            confirmDirty: false,\n            // suburbList: []\n        }\n    }\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n          if (!err) {\n            // const date = values['month-picker'].format(\"YYYY-MM\")\n            // values[\"month-picker\"] = date\n            console.log('Received values of form: ', values);\n            this.props.register(values)\n            }\n        });\n    };\n\n    handleConfirmBlur = e => {\n        const { value } = e.target;\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n      };\n    \n    compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n    } else {\n        callback();\n    }\n    };\n\n    validateToNextPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n    };\n\n    validatePreferName = (rule, value, callback) => {\n        const namePattern = /^[A-Za-z\\s]+$/\n        // console.log(\"111\")\n        if(!namePattern.test(value)){\n          callback('You should input legal name!');\n        }else{\n          callback()\n        }\n      }\n    \n    validateNameLength = (rule, value, callback) => {\n        if(value.length> 20){\n            callback(\"The length of the name should no more than 20.\")\n        }else{\n            callback()\n        }\n    }\n\n\n\n    validatePassword = (rule, value, callback) => {\n        const passwordPattern = /^(?=.*\\d)(?=.*[a-zA-Z])[0-9a-zA-Z]{8,20}$/\n        if(!passwordPattern.test(value)){\n            callback('The password length should between 8 to 20 and contains at least one number and one character(a-z or A-Z)');\n          }else{\n            callback()\n          }\n    }\n\n    // componentDidMount(){\n    //     getSuburbList()\n    //         .then(resp => {\n    //             let respData = resp.data\n    //             // console.log(respData)\n    //             respData = respData.map((item) => {\n    //                 return item.trim()\n    //             })\n    //             this.setState({\n    //                 suburbList : respData\n    //             })\n    //         })\n    //         .catch(err => {\n    //         // deal with error\n    //             message.error(err)\n    //         })\n    //         .finally(() => {\n    //             // console.log()\n    //         }) \n    // }\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        // const { autoCompleteResult } = this.state;\n\n        const formItemLayout = {\n        labelCol: {\n            xs: { span: 24 },\n            sm: { span: 8 },\n        },\n        wrapperCol: {\n            xs: { span: 24 },\n            sm: { span: 16 },\n        },\n        };\n        const tailFormItemLayout = {\n        wrapperCol: {\n            xs: {\n            span: 24,\n            offset: 0,\n            },\n            sm: {\n            span: 16,\n            offset: 8,\n            },\n            },\n        };\n        // const config = {\n        //     rules: [{ type: 'object', required: true, message: 'Please select time!' }],\n        // };\n\n        return (\n            this.props.isLogin\n            ?\n            <Redirect to=\"./Account\"/>\n            :\n            <Col lg={{span:12, offset:6}} md = {{span: 22, offset:1}} style={{marginTop:\"24px\", marginBottom:\"24px\"}}>\n                <Card style={{maxWidth: \"500px\", margin: \"auto\"}}>\n                <Form {...formItemLayout} onSubmit={this.handleSubmit} >\n                    <Form.Item label=\"E-mail\" >\n                    {getFieldDecorator('email', {\n                        rules: [\n                        {\n                            type: 'email',\n                            message: 'The input is not valid E-mail!',\n                        },\n                        {\n                            required: true,\n                            message: 'Please input your E-mail!',\n                        },\n                        ],\n                    })(<Input disabled = {this.props.isLoading} />)}\n                    </Form.Item>\n                    <Form.Item label=\"Password\" hasFeedback>\n                    {getFieldDecorator('password', {\n                        rules: [\n                        {\n                            required: true,\n                            message: 'Please input your password!',\n                        },\n                        {\n                            validator: this.validatePassword\n                        },\n                        {\n                            validator: this.validateToNextPassword,\n                        },\n                        ],\n                    })(<Input.Password disabled = {this.props.isLoading} />)}\n                    </Form.Item>\n                    <Form.Item label=\"Confirm Password\" hasFeedback>\n                    {getFieldDecorator('confirm', {\n                        rules: [\n                        {\n                            required: true,\n                            message: 'Please confirm your password!',\n                        },\n                        {\n                            validator: this.compareToFirstPassword,\n                        },\n                        ],\n                    })(<Input.Password onBlur={this.handleConfirmBlur}  disabled = {this.props.isLoading} />)}\n                    </Form.Item>\n                    <Form.Item\n                    label={\n                        <span>\n                        Nickname&nbsp;\n                        <Tooltip title=\"What do you want others to call you?\">\n                            <Icon type=\"question-circle-o\" />\n                        </Tooltip>\n                        </span>\n                    }\n                    >\n                    {getFieldDecorator('nickname', {\n                        rules: [\n                            { required: true, message: 'Please input your nickname!', whitespace: true },\n                            { validator: this.validatePreferName },\n                            { validator: this.validateNameLength}\n                    ],\n                    })(<Input disabled = {this.props.isLoading}/>)}\n                    </Form.Item>\n                    {/* <Form.Item\n                    label={\n                        <span>\n                        Age&nbsp;\n                        </span>\n                    }\n                    >\n                    {getFieldDecorator('age', {\n                        rules: [{ required: true, message: 'Please input your age!'}, {validator: this.validateAge}],\n                    })(<InputNumber />)}\n                    </Form.Item>\n                    <Form.Item \n                        label={\n                            <span>\n                            Vaccination record&nbsp;\n                            <Tooltip title=\"When was the last tiem that the person took the flu shot?\">\n                            <Icon type=\"question-circle-o\" />\n                            </Tooltip>\n                            </span>\n                        }\n                    >\n                        {getFieldDecorator('month-picker', config)(<MonthPicker />)}\n                    </Form.Item>\n                    <Form.Item \n                    label={\n                        <span>\n                        Current Region&nbsp;\n                        <Tooltip title=\"In which region are you currently living in?(Such as: Monash, WhiteHorse)\">\n                            <Icon type=\"question-circle-o\" />\n                        </Tooltip>\n                        </span>\n                    }\n                    >\n                        {getFieldDecorator('region', {\n                            rules: [{ required: true, message: 'Please input region!' }],\n                        })(\n                            <AutoComplete\n                            dataSource={this.state.suburbList}\n                            filterOption={(inputValue, option) =>\n                                option.props.children.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\n                              }\n                            placeholder=\"region\"\n                            >\n                            <Input />\n                            </AutoComplete>,\n                        )}\n                    </Form.Item> */}\n                    <Form.Item {...tailFormItemLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" loading={this.props.isLoading}>\n                        Register\n                    </Button>\n                    </Form.Item>\n                </Form>\n                </Card>\n            </Col>\n        )\n    }\n}\n\n\nconst mapStateToProps = state => ({\n    isLogin: state.user.isLogin,\n    isLoading: state.user.isLoading\n})\nexport default connect(mapStateToProps, {register})(Form.create({ name: 'register' })(Register))\n\n\n","import actionTypes from './actionTypes'\nimport { registerRequest } from '../requests'\nimport { message } from 'antd'\n\n\nconst startRegister = () =>{\n    return{\n        type: actionTypes.START_REGISTER\n    }\n}\n\nconst registerSuccess = (userInfo) => {\n    message.success(`Congratulation ${userInfo.nickname}！You have registered successfully`)\n    return {\n        type: actionTypes.REGISTER_SUCCESS,\n        payload: {\n            userInfo\n        }\n    }\n}\n\nconst registerFailed = () => {\n    message.error(\"Oops! This email address has been already registered!\", 2)\n    return{\n        type: actionTypes.REGISTER_FAILED \n    }\n}\n\nexport const register = (userInfo) =>{\n    return dispatch =>{\n        dispatch(startRegister())\n        const requestBody = JSON.stringify(userInfo)\n        registerRequest(requestBody)\n            .then(resp => {\n                if(resp.data){\n                    window.sessionStorage.setItem(\"user\", JSON.stringify(resp.data))\n                    dispatch(registerSuccess(resp.data))\n                }else{\n                    dispatch(registerFailed())\n                }\n            })\n    }        \n}"],"sourceRoot":""}